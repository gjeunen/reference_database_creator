# using slightly older ubuntu version to have optimal python version installed
FROM ubuntu:24.04

# This arg to avoid the install stopping and waiting for input
ARG DEBIAN_FRONTEND=noninteractive

# update ubuntu
RUN apt-get update && apt-get -y dist-upgrade

# install utilities, python & packages
#     python3-venv \
RUN apt-get -y install apt-utils \
    build-essential \
    python3 \
    gcc \
    python3-dev \
    python3-venv \
    python3-pip \
    python3-numpy \
    python3-pandas \
    cutadapt \
    pigz \
    git \
    autoconf \
    automake \
    make \
    wget

# removing the ubuntu-installed version so can install proper version with pip3
RUN apt -y remove python3-matplotlib
# this will remove other packages associated with matplotlib
RUN apt -y autoremove
# create directory for install 

#RUN mkdir /share

#WORKDIR /share

# 

COPY requirements.txt .

#RUN apt-get update; apt-get -y install python3.11 python3-pip python3.11-venv
#RUN python3 -m venv .venv && /app/.venv/bin/python -m pip install -r requirements.txt

# copy reqs doc over and install with pip3
# the --break-system-packages argument is to avoid issues
RUN pip3 install -r requirements.txt --break-system-packages


# 
COPY . .

# https://askubuntu.com/questions/1465218/pip-error-on-ubuntu-externally-managed-environment-%C3%97-this-environment-is-extern
#RUN python3 -m venv /share/.venv && /share/.venv/bin/python -m pip install -r /requirements.txt

#RUN source .venv/bin/activate
#COPY requirements.txt .
#RUN pip3 install -r requirements.txt
#RUN venv/bin/pip3 install -r requirements.txt 

#RUN pip install --no-cache-dir --upgrade pip \
 # && pip install --no-cache-dir -r requirements.txt

# 
#RUN pip3 install cutadapt==4.4
#RUN pip3 install requests==2.32.3
#RUN pip3 install rich==13.3.5
#RUN pip3 install rich-click==1.7.2
#RUN pip3 install matplotlib==3.10
##### de jairo
#ENV MY_ENV=/opt/my-venv
#RUN apt add --update py-pip
#RUN python3 -m venv $MY_ENV \
#	&& $MY_ENV/bin/pip install -U pip setuptools 
#ENV PATH="${MY_ENV}/bin:$PATH"

#RUN pip install fastapi
#RUN pip install -r requirements.txt
WORKDIR /share
#
RUN mkdir /usr/vsearch
# install vsearch
RUN cd /usr/vsearch && \
    wget https://github.com/torognes/vsearch/archive/v2.21.1.tar.gz && \
    tar xzf v2.21.1.tar.gz && \
    cd vsearch-2.21.1 && \
    ./autogen.sh && \
    ./configure CFLAGS="-O3" CXXFLAGS="-O3" && \
    make && \
    make install && \
    ln -s /usr/src/vsearch /usr/bin/vsearch && \
    rm -rf vsearch

# create dir for clustal
#WORKDIR /
RUN mkdir /usr/clustal

# install clustalw
RUN cd /usr/clustal && \
    wget http://www.clustal.org/download/current/clustalw-2.1.tar.gz && \
    tar xvzf clustalw-2.1.tar.gz && \
    cd clustalw-2.1/ && \
    ./configure && \
    make && \
    make install && \
    ln -s /usr/src/clustalw2 /usr/bin/clustalw2

#
WORKDIR /
# fast tree
RUN apt-get install -y fasttree
# 
# BLAST
RUN apt-get install -y --no-install-recommends ncbi-blast+

# create dir for crabs function folder
RUN mkdir /usr/local/bin/function

# Copy files from host to the working directory
COPY crabs /usr/local/bin
COPY function/ /usr/local/bin/function/
# current version: 1.7.5    # 0.1.3
CMD ["crabs"]

